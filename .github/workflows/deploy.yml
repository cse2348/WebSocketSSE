name: Deploy to EC2

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build
        run: ./gradlew clean build -x test

      # Runner에서 ECR 로그인 (이미지 push용)
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build and Push Docker Image
        run: |
          IMAGE_URI="${{ secrets.ECR_REPOSITORY }}:latest"
          docker build -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"

      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -e

            export AWS_REGION='${{ secrets.AWS_REGION }}'
            export AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}'
            export AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}'
            REGISTRY_HOST="$(echo '${{ secrets.ECR_REPOSITORY }}' | awk -F/ '{print $1}')"
            aws ecr get-login-password --region "$AWS_REGION" \
              | docker login --username AWS --password-stdin "$REGISTRY_HOST"

            cat > .env <<'EOF'
            SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}
            SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}
            SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            SPRING_DATA_REDIS_HOST=${{ secrets.SPRING_DATA_REDIS_HOST }}
            SPRING_DATA_REDIS_PORT=${{ secrets.SPRING_DATA_REDIS_PORT }}
            EOF

            IMAGE_URI='${{ secrets.ECR_REPOSITORY }}:latest'

            docker pull "$IMAGE_URI"
            docker stop app || true
            docker rm app || true

            docker run -d \
              --name app \
              --restart=always \
              --env-file .env \
              -p 8080:8080 \
              "$IMAGE_URI"
