name: Deploy to EC2

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build
        run: ./gradlew clean build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          aws-region:    ${{ secrets.AWS_REGION }}
          mask-password: true

      - name: Build and Push Docker Image
        run: |
          set -euo pipefail
          IMAGE_SHA="${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}"
          IMAGE_LATEST="${{ secrets.ECR_REPOSITORY }}:latest"
          docker build -t "$IMAGE_SHA" -t "$IMAGE_LATEST" .
          docker push "$IMAGE_SHA"
          docker push "$IMAGE_LATEST"

      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -euo pipefail

            REGISTRY_HOST="$(echo '${{ secrets.ECR_REPOSITORY }}' | awk -F/ '{print $1}')"
            AWS_REGION='${{ secrets.AWS_REGION }}'
            AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}'
            AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}'
            export AWS_REGION AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
            aws ecr get-login-password --region "$AWS_REGION" \
              | docker login --username AWS --password-stdin "$REGISTRY_HOST"

            cat > .env <<'EOF'
            SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}
            SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}
            SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            SPRING_DATA_REDIS_HOST=${{ secrets.SPRING_DATA_REDIS_HOST }}
            SPRING_DATA_REDIS_PORT=${{ secrets.SPRING_DATA_REDIS_PORT }}
            EOF

            IMAGE_URI='${{ secrets.ECR_REPOSITORY }}:latest'

            docker pull "$IMAGE_URI"
            docker stop app || true
            docker rm app || true


            docker image prune -a -f
            docker run -d \
              --name app \
              --restart=always \
              --env-file .env \
              -p 8080:8080 \
              "$IMAGE_URI"
