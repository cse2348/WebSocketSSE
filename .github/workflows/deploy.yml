name: Deploy to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image to ECR
        run: |
          IMAGE_URI=${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker build -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -e
            IMAGE_URI=${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

            # ECR login on EC2
            aws ecr get-login-password --region ${{ env.AWS_REGION }} \
              | docker login --username AWS --password-stdin $(echo "${{ env.ECR_REPOSITORY }}" | awk -F/ '{print $1}')

            # runtime envs
            echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}" > .env
            echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env
            echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env

            # WebSocket/SSE에서 추가로 필요한 환경 변수 예시
            echo "SSE_TIMEOUT=${{ secrets.SSE_TIMEOUT }}" >> .env   # SSE 연결 타임아웃 (ms)
            echo "SSE_RETRY_INTERVAL=${{ secrets.SSE_RETRY_INTERVAL }}" >> .env   # 재연결 간격 (ms)

            # pull new image
            docker pull "$IMAGE_URI"

            # stop & remove existing container if exists
            docker ps -q --filter "name=app" | grep -q . && docker stop app || true
            docker ps -aq --filter "name=app" | grep -q . && docker rm app || true

            # run new container
            docker run -d \
              --name app \
              --restart=always \
              --env-file .env \
              -p 8080:8080 \
              "$IMAGE_URI"

            rm -f .env
